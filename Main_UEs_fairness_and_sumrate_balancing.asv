%% Main_UEs_fairness_and_sumrate_balancing
% Main program for comparing the UE fairness and sum rate balancing performance of algorithms(Fig.5(a) and Fig.5(b)))
% Author: Hui Mingyuan
% Date: 20221103
% Note: n
clear
close all
disp(datestr(now))
tic
%% Initialization parameters
% Nt = 128; 
% Ntrf = 16;
% Nr = 8;
% Nrrf = 2;
% Ns = 2;
% K = 8;
% Nk = 64;
% Iter = 10;
% numMC = 10;
% POT=0:2:20;
% PON=-156+10*log10(100*1e6/Nk); %power of background noise  dbm

% % due to the huge computational time of the naghsh, the complete simulation will take several days.
% % We used several computers, each running multiple matlab programs, for several days to get the simulations in the manuscript.
% % The small-scale parameters shown below can be used to test how the
% % algorithm works. (Estimated time: 10 minutes)

Nt = 128; 
Ntrf = 16;
Nr = 8;
Nrrf = 2;
Ns = 2;
K = 8;
Nk = 2;
Iter = 10;
numMC = 2;
POT=0:10:20; % PowerOfTransmit dbm 
PON=-156+10*log10(100*1e6/64); %power of background noise  dbm

%% pathloss & power of noise
pd=gen_lossmultiple(K);
% load('userposition_and_lossmultiple7.mat')
lossmultiple=pd;
%% POT and channel


h=zeros(Nr,Nt,K,Nk,numMC);

for ii = 1:K
    for kk = 1:numMC
        [h(:,:,ii,:,kk),~,~] = OMPHWB(Nt,Nr,Nk);
    end
    h(:,:,ii,:,:)=sqrt(lossmultiple(ii)).*h(:,:,ii,:,:); 
end

H = zeros(K*Nr,Nt,Nk,numMC);
for mc = 1:numMC
    for k = 1:K
        H(Nr*(k-1)+1:Nr*k,:,:,mc)=h(:,:,k,:,mc);
    end
end


%% SNR v.s. Algorithm
RateofFDBF_sumlog = zeros(numMC,length(POT),K);
RateofNaghsh = zeros(numMC,length(POT),K);
RateofHBF_typicalsumlog = zeros(numMC,length(POT),K);
RateofHBF_sumlog = zeros(numMC,length(POT),K);
POTnum=length(POT);
Vn =db2pow(PON); % Ïƒ^2


for n = 1 : numMC
    [init_FRF_pc, init_FRF_fc,init_WRF_fc,init_WRF_pc,init_FRF_ac,init_WRF_ac]=generatefrfandwrf( Nt, Nr,  Ntrf, K, Nrrf);
    for POT_idx = 1:POTnum
        Pt = db2pow(POT(POT_idx));
        fprintf('In simulation %d, current POT is %d dBm.\n ', n,POT(POT_idx) )
        %% naghsh
        [~,RateofNaghsh(n,POT_idx,:)] = Naghsh(h(:,:,:,:,n),Nr,Nt, Ns, Nk, K, Vn,Iter,Pt);
        %%
        [~,~,B,A,W] = FDBF_sumlog(H(:,:,:,n),h(:,:,:,:,n),Nr,Nt, Ns, Nk, K, Vn,Iter,Pt);
        [~,RateofHBF_sumlog(n,POT_idx,:)] = HBF_sumlog(H(:,:,:,n),h(:,:,:,:,n),init_FRF_fc,1,Nk, Nt, Nr, Vn, Ns, Ntrf, K, Iter,init_WRF_fc,Nrrf,Pt,B,A,W);
        %%
        [~,RateofFDBF_sumlog(n,POT_idx,:),~,~,~] = FDBF_sumlog(H(:,:,:,n),h(:,:,:,:,n),Nr,Nt, Ns, Nk, K, Vn,2*Iter,Pt);
        %%
        [~,~,B,A,W] = FDBF_SRM(H(:,:,:,n),h(:,:,:,:,n),Nr,Nt, Ns, Nk, K, Vn,Iter,Pt);
        [~,RateofHBF_typicalsumlog(n,POT_idx,:)] = HBF_SRM(H(:,:,:,n),h(:,:,:,:,n),init_FRF_fc,1,Nk, Nt, Nr, Vn, Ns, Ntrf, K, Iter,init_WRF_fc,Nrrf,Pt,B,A,W);

    end
end
disp(datestr(now))
toc

RateofFDBF_sumlog_mean = squeeze(sum(RateofFDBF_sumlog)/numMC);
RateofNaghsh_mean = squeeze(sum(RateofNaghsh)/numMC);
RateofHBF_typicalsum_mean = squeeze(sum(RateofHBF_typicalsumlog)/numMC);
RateofHBF_sumlog_mean = squeeze(sum(RateofHBF_sumlog)/numMC);

%% sum rate comparison
HBF_sumlog_getsum=(sum(RateofHBF_sumlog_mean'));
FDBF_sumlog_getsum=(sum(RateofFDBF_sumlog_mean'));
Naghsh_getsum=(sum(RateofNaghsh_mean'));
HBF_typicalsum_getsum=(sum(RateofHBF_typicalsum_mean'));

figure
plot(POT, Naghsh_getsum, 'LineWidth', 2);hold on
plot(POT, FDBF_sumlog_getsum, 'LineWidth', 2);hold on
plot(POT, HBF_sumlog_getsum, 'LineWidth', 2);hold on
plot(POT, HBF_typicalsum_getsum, 'LineWidth', 2);hold on
grid on
legend('Naghsh-MMFM','FD-LSM','HBF-SLM','HBF-SRM')
xlabel('$P_{\mathrm{t}}$ (dBm)')
ylabel('Spectral efficiency (bits/s/Hz)')

%% worst situation comparison
HBF_sumlog_ws=min(RateofHBF_sumlog_mean');
FDBF_sumlog_ws=min(RateofFDBF_sumlog_mean');
HBF_typicalsum_ws=min(RateofHBF_typicalsum_mean');
Naghsh_ws=min(RateofNaghsh_mean');
%%  
figure
plot(POT, Naghsh_ws, 'LineWidth', 2);hold on
plot(POT, FDBF_sumlog_ws , 'LineWidth', 2);hold on
plot(POT, HBF_sumlog_ws, 'LineWidth', 2);hold on
plot(POT, HBF_typicalsum_ws, 'LineWidth', 2);hold on
grid on
legend('Naghsh-MMFM','FD-LSM','HBF-SLM','HBF-SRM')
xlabel('$P_{\mathrm{t}}$ (dBm)')
ylabel('Rate of the worst-performing UE (bit/s/Hz)')
